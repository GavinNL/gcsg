#########################
# project configuration #
#########################

# C++ project
language: cpp

dist: trusty
sudo: required
group: edge


###################
# global settings #
###################

env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   #- secure: "m89SSgE+ASLO38rSKx7MTXK3n5NkP9bIx95jwY71YEiuFzib30PDJ/DifKnXxBjvy/AkCGztErQRk/8ZCvq+4HXozU2knEGnL/RUitvlwbhzfh2D4lmS3BvWBGS3N3NewoPBrRmdcvnT0xjOGXxtZaJ3P74TkB9GBnlz/HmKORA="


################
# build matrix #
################

matrix:
  include:

  # OSX / Clang

  - os: osx
    osx_image: xcode7.3
    env:
    - compiler=clang
    - COMPILER_CC=clang
    - COMPILER_CXX=clang++

  - os: osx
    osx_image: xcode8
    env:
    - compiler=clang
    - COMPILER_CC=clang
    - COMPILER_CXX=clang++

  - os: osx
    osx_image: xcode8.1
    env:
    - compiler=clang
    - COMPILER_CC=clang
    - COMPILER_CXX=clang++

  - os: osx
    osx_image: xcode8.2
    env:
    - compiler=clang
    - COMPILER_CC=clang
    - COMPILER_CXX=clang++

  - os: osx
    osx_image: xcode8.3
    env:
    - compiler=clang
    - COMPILER_CC=clang
    - COMPILER_CXX=clang++

  - os: osx
    osx_image: xcode9
    env:
    - compiler=clang
    - COMPILER_CC=clang
    - COMPILER_CXX=clang++

  - os: osx
    osx_image: xcode9.1
    env:
    - compiler=clang
    - COMPILER_CC=clang
    - COMPILER_CXX=clang++

  - os: osx
    osx_image: xcode9.2
    env:
    - compiler=clang
    - COMPILER_CC=clang
    - COMPILER_CXX=clang++

  - os: osx
    osx_image: xcode9.3
    env:
    - compiler=clang
    - COMPILER_CC=clang
    - COMPILER_CXX=clang++

  - os: osx
    osx_image: xcode9.4
    env:
    - compiler=clang
    - COMPILER_CC=clang
    - COMPILER_CXX=clang++

  - os: osx
    osx_image: xcode10
    env:
    - compiler=clang
    - COMPILER_CC=clang
    - COMPILER_CXX=clang++


# # Linux / GCC

  - os: linux
    compiler: gcc
    env:
    - compiler=g++-4.8
    - COMPILER_CC=gcc-4.8
    - COMPILER_CXX=g++-4.8
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-4.8', 'ninja-build']

  - os: linux
    compiler: gcc
    env:
    - compiler=g++-4.9
    - COMPILER_CC=gcc-4.9
    - COMPILER_CXX=g++-4.9
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-4.9', 'ninja-build']

  - os: linux
    compiler: gcc
    env:
    - COMPILER=g++-5
    - COMPILER_CC=gcc-5
    - COMPILER_CXX=g++-5
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-5', 'ninja-build']

  - os: linux
    compiler: gcc
    env:
    - COMPILER=g++-6
    - COMPILER_CC=gcc-6
    - COMPILER_CXX=g++-6
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-6', 'ninja-build']

  - os: linux
    compiler: gcc
    env:
    - COMPILER=g++-7
    - RUN_CODECOV=TRUE
    - COMPILER_CC=gcc-7
    - COMPILER_CXX=g++-7
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['gcc-7', 'g++-7', 'ninja-build']

  - os: linux
    compiler: gcc
    env:
    - COMPILER=g++-8
    - COMPILER_CC=gcc-8
    - COMPILER_CXX=g++-8
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-8', 'ninja-build']

  - os: linux
    compiler: gcc
    env:
    - COMPILER_CC=gcc-8
    - COMPILER_CXX=g++-8
    - CXXFLAGS=-std=c++17
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-8', 'ninja-build']
#
# # Linux / Clang
#
  - os: linux
    compiler: clang
    env:
    - COMPILER_CXX=clang++-3.5
    - COMPILER_CC=clang-3.5
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-precise-3.5']
        packages: ['g++-6', 'clang-3.5', 'ninja-build']

  - os: linux
    compiler: clang
    env:
    - COMPILER_CXX=clang++-3.6
    - COMPILER_CC=clang-3.6
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-precise-3.6']
        packages: ['g++-6', 'clang-3.6', 'ninja-build']

  - os: linux
    compiler: clang
    env:
    - COMPILER_CXX=clang++-3.7
    - COMPILER_CC=clang-3.7
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-precise-3.7']
        packages: ['g++-6', 'clang-3.7', 'ninja-build']

  - os: linux
    compiler: clang
    env:
    - COMPILER_CXX=clang++-3.8
    - COMPILER_CC=clang-3.8
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-6', 'clang-3.8', 'ninja-build']

  - os: linux
    compiler: clang
    env:
    - COMPILER_CXX=clang++-3.9
    - COMPILER_CC=clang-3.9
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-6', 'clang-3.9', 'ninja-build']

  - os: linux
    compiler: clang
    env:
    - COMPILER_CXX=clang++-4.0
    - COMPILER_CC=clang-4.0
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-4.0']
        packages: ['g++-6', 'clang-4.0', 'ninja-build']

  - os: linux
    compiler: clang
    env:
    - COMPILER_CXX=clang++-5.0
    - COMPILER_CC=clang-5.0
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-5.0']
        packages: ['g++-6', 'clang-5.0', 'ninja-build']

  - os: linux
    compiler: clang
    env:
    - COMPILER_CXX=clang++-6.0
    - COMPILER_CC=clang-6.0
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-6.0']
        packages: ['g++-6', 'clang-6.0', 'ninja-build']

  - os: linux
    compiler: clang
    env:
      - COMPILER_CXX=clang++-6.0
      - COMPILER_CC=clang-6.0
      - CXXFLAGS=-std=c++1z
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-6.0']
        packages: ['g++-6', 'clang-6.0', 'ninja-build']


##################
# Install script #
##################
install:
- echo "Hello!"



################
# build script #
################
script:

  # get CMake and Ninja (only for systems with brew - macOS)
  - |
     if [[ (-x $(which brew)) ]]; then
       brew update
       brew install cmake ninja
       brew upgrade cmake
       cmake --version
     fi


  # Install Conan Package Manager to handle dependencies
  - chmod +x .travis/install.sh
  - ./.travis/install.sh


  # make sure CXX is correctly set
  - if [[ "${COMPILER_CXX}" != "" ]]; then export CXX=${COMPILER_CXX}; fi
  - if [[ "${COMPILER_CC}" != "" ]]; then export CC=${COMPILER_CC}; fi

  # show OS/compiler version
  - uname -a
  - echo ===============================================
  - echo COMPILER VERSIONS
  - echo ===============================================
  - $CXX --version
  - $CC --version
  - echo ===============================================

  # compile and execute unit tests
  - chmod +x .travis/build.sh
  - ./.travis/build.sh
  - cd ..

  - if [[ "${RUN_CODECOV}" = "TRUE" ]]; then bash <(curl -s "https://codecov.io/bash"); fi




